{"version":3,"sources":["src/tvm.js","src/main.js","index.js"],"names":["TVM","round","number","decimals","amount","Math","pow","prototype","futureValue","presentValue","interest","numPeriods","perPeriod","log","futureValueAnnuityDue","payment","futureValueAnnuityAdvance","presentValueAnnuityDue","newInterest","presentValueAnnuityAdvance","effectiveRate","nominalRate","module","exports","tvm","require","businessjs","window"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["const TVM = function() {};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} presentValue The present value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValue = function(presentValue, interest, numPeriods = 1, perPeriod = 1) {\n  return round(presentValue * Math.pow(1 + interest / perPeriod, numPeriods * perPeriod), 2);\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValue = function(futureValue, interest, numPeriods = 1, perPeriod = 1) {\n  return round(futureValue / Math.pow(1 + interest / perPeriod, numPeriods * perPeriod), 2);\n};\n\n/**\n * Returns the number of periods required for a specific amount and rate\n * @param {Number} presentValue The present value of the amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.numPeriods = function(presentValue, futureValue, interest, perPeriod = 1) {\n  return round((Math.log(futureValue) - Math.log(presentValue)) / Math.log(1 + interest / perPeriod), 4);\n};\n\n/**\n * Returns the number of periods required for a specific amount and rate\n * @param {Number} presentValue The present value of the amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.interest = function(presentValue, futureValue, numPeriods = 1, perPeriod = 1) {\n  return round(Math.pow(futureValue / presentValue, 1 / (numPeriods * perPeriod)) - 1, 6);\n};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValueAnnuityDue = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round(payment * ((Math.pow(1 + interest, numPeriods * perPeriod + 1) - 1) / (interest / perPeriod) - 1), 2);\n};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} payment The amount paid at the beginning of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValueAnnuityAdvance = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round(payment * ((Math.pow(1 + interest / perPeriod, numPeriods * perPeriod) - 1) / (interest / perPeriod)), 2);\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValueAnnuityDue = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  let newInterest = interest / perPeriod;\n  let discount = 1 / Math.pow(1 + newInterest, 2);\n  let ratio = (1 - discount) / newInterest + 1;\n  return 100 * ratio;\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValueAnnuityAdvance = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round((payment * (1 - 1 / Math.pow(1 + interest / perPeriod, numPeriods * perPeriod))) / (interest / perPeriod), 2);\n};\n\n/**\n * Returns the annual effective interest rate from a nominal rate\n * @param {Number} payment The amount paid at the beginning of every payment cycle\n * @param {Number} perPeriod How many times interest compounds in a period\n */\nTVM.prototype.effectiveRate = function(nominalRate, perPeriod) {\n  return Math.pow(1 + nominalRate / perPeriod, perPeriod) - 1;\n};\n\nfunction round(number, decimals) {\n  let amount = Math.pow(10, decimals);\n  return Math.round((number + 0.00001) * amount) / amount;\n}\n\nmodule.exports = new TVM();\n","const tvm = require('./tvm');\n\nconst businessjs = {\n  tvm\n};\n\nmodule.exports = businessjs;\n","const businessjs = require('./src/main');\n\nmodule.exports = businessjs;\n\nif (typeof window !== 'undefined') {\n  window.businessjs = businessjs;\n}\n"]}