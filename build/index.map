{"version":3,"sources":["src/tvm.js","src/main.js","index.js"],"names":["TVM","prototype","futureValue","presentValue","interest","numPeriods","perPeriod","round","Math","pow","log","futureValueAnnuityDue","payment","futureValueAnnuityAdvance","presentValueAnnuityDue","newInterest","discount","ratio","presentValueAnnuityAdvance","effectiveRate","nominalRate","number","decimals","amount","module","exports","tvm","require","businessjs","window"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["const TVM = function() {};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} presentValue The present value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValue = function(presentValue, interest, numPeriods = 1, perPeriod = 1) {\n  return round(presentValue * Math.pow(1 + interest / perPeriod, numPeriods * perPeriod), 2);\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValue = function(futureValue, interest, numPeriods = 1, perPeriod = 1) {\n  return round(futureValue / Math.pow(1 + interest / perPeriod, numPeriods * perPeriod), 2);\n};\n\n/**\n * Returns the number of periods required for a specific amount and rate\n * @param {Number} presentValue The present value of the amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.numPeriods = function(presentValue, futureValue, interest, perPeriod = 1) {\n  return round((Math.log(futureValue) - Math.log(presentValue)) / Math.log(1 + interest / perPeriod), 4);\n};\n\n/**\n * Returns the number of periods required for a specific amount and rate\n * @param {Number} presentValue The present value of the amount\n * @param {Number} futureValue The future value of the amount\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.interest = function(presentValue, futureValue, numPeriods = 1, perPeriod = 1) {\n  return round(Math.pow(futureValue / presentValue, 1 / (numPeriods * perPeriod)) - 1, 6);\n};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValueAnnuityDue = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round(payment * ((Math.pow(1 + interest, numPeriods * perPeriod + 1) - 1) / (interest / perPeriod) - 1), 2);\n};\n\n/**\n * Returns the future value of a compounding or simple amount\n * @param {Number} payment The amount paid at the beginning of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.futureValueAnnuityAdvance = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round(payment * ((Math.pow(1 + interest / perPeriod, numPeriods * perPeriod) - 1) / (interest / perPeriod)), 2);\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValueAnnuityDue = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  let newInterest = interest / perPeriod;\n  let discount = 1 / Math.pow(1 + newInterest, 2);\n  let ratio = (1 - discount) / newInterest + 1;\n  return 100 * ratio;\n};\n\n/**\n * Returns the present value of a compounding or simple amount\n * @param {Number} interest The interest amount in decimal\n * @param {Number} payment The amount paid at the end of every payment cycle\n * @param {Number} [numPeriods=1] The number of periods usually years\n * @param {Number} [perPeriod=1] How many times interest compounds in a period\n */\nTVM.prototype.presentValueAnnuityAdvance = function(payment, interest, numPeriods = 1, perPeriod = 1) {\n  return round((payment * (1 - 1 / Math.pow(1 + interest / perPeriod, numPeriods * perPeriod))) / (interest / perPeriod), 2);\n};\n\n/**\n * Returns the annual effective interest rate from a nominal rate\n * @param {Number} payment The amount paid at the beginning of every payment cycle\n * @param {Number} perPeriod How many times interest compounds in a period\n */\nTVM.prototype.effectiveRate = function(nominalRate, perPeriod) {\n  return Math.pow(1 + nominalRate / perPeriod, perPeriod) - 1;\n};\n\nfunction round(number, decimals) {\n  let amount = Math.pow(10, decimals);\n  return Math.round((number + 0.00001) * amount) / amount;\n}\n\nmodule.exports = new TVM();\n","const tvm = require('./tvm');\n\nconst businessjs = {\n  tvm\n};\n\nmodule.exports = businessjs;\n","const businessjs = require('./src/main');\n\nmodule.exports = businessjs;\n\nif (typeof window !== 'undefined') {\n  window.businessjs = businessjs;\n}\n"]}